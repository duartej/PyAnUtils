#!/usr/bin/env python 
""":script:`getdecorations` -- Dump the list of decorations 
============================================================

.. script:: getdecorations XAODFILE [OPTIONS]
      :platform: Unix
      :synopsis: Dump the name and type of the decorations present in
                 a persistent collection of a xAOD file

	  .. moduleauthor:: Jordi Duarte-Campderros <jorge.duarte.campderros@cern.ch>
                        adapted from an anonymous script found on the ATLAS twikis
"""

def printOut(colinfodict,extra_header=""):
    """Formatting printout message

    Parameters
    ----------
    colinfodict: dict( (str,list(str)) )
        the list of decorators per each collection
    extra_header: str, default: ""
        a string to be appended to the end of the header
        of the message

    Return
    ------
    message: str
        the formatted and ordered list of decorators per 
        collection
    """
    message = ""
    for name,declist in sorted(colinfodict.iteritems(),key=lambda (x,y): y):
        message += "Decorators found at {0} {1}\n".format(name,extra_header)
        # guard against empty lists
        if len(declist) == 0:
            return message+"++++ NO ELEMENTS FOUND ++++\n"
        sright  = max(map(lambda (x,y): len(y),declist))
        sleft = max(map(lambda (x,y): len(x),declist))
        premesg = "{0:<"+str(sleft)+"} :: {1:<"+str(sright)+"}\n"
        totalline = len(premesg)+sleft+sright
        message += '='*totalline+'\n'
        message += premesg.format("Data Type","Decorator Name")
        message += '-'*totalline+'\n'
        for dectype,decname in sorted(declist,key=lambda (x,y): x):
            message += premesg.format(dectype,decname)
        message += '\n'
    return message

def main(filename,collections):
    """Steers the decorator name extraction from the file

    Parameters
    ----------
    filename: ROOT.TFile
    collections: list(str)
        The name of the collections to extract the decorators
    """
    import ROOT
    try:
        import PyUtils.PoolFile as PF
    except ImportError:
        raise ImportError("You need to setup an Athena release...")
    # Get the file with the proper wrapper
    poolFile = PF.PoolFile( filename )
    t = poolFile.poolFile.CollectionTree
    dummy = t.GetEntry(0)
    
    if len(collections) == 0:
    	print "Should be included some collection to look at..."
        print "Available collections are:"
        for i in t.GetListOfLeaves(): 
            print " + %s" % (i.GetName())
        return 
    
    reg = ROOT.SG.AuxTypeRegistry.instance()

    deco = {}
    # -- for the dynamic store
    decoDyn = {}

    for i in collections:
        try:
            obj_container = getattr(t,i)
            objAux = getattr(t,i+"Aux")
        except AttributeError:
            message = "\033[1;31mgetdecorations WARNING\033[1;m There is no container"
            message+= " with instance name '{0}'".format(i)
            print message
            continue
        # Find an entry where we have at least one element
        for iEvt in xrange(t.GetEntries()):
            dummy = t.GetEntry(iEvt)
            obj_container = getattr(t,i)
            objAux = getattr(t,i+"Aux")
            obj_container.setStore(objAux)
            if obj_container.size() > 0:
                break
        # Use this element to extract the auxiliary data (decorators)
        obj = obj_container.at(0)
        deco[i] = []
        auxids = list(obj.getAuxIDs())
        for auxid in auxids:
            deco[i].append((reg.getTypeName(auxid),reg.getName(auxid)))
        # --- Now, check the dynamic components -->
        decoDyn[i] = []
        for branchname in filter(lambda x: x.GetName().find("{0}AuxDyn".format(i)) == 0,\
                t.GetListOfBranches()):
            # the relevant info is in the name of the tree
            decoDyn[i].append( (branchname.GetName(), branchname.GetClassName()) )
     
    print printOut(deco,"[Static]")
    print printOut(decoDyn,"[Dynamic]")

if __name__ == '__main__':
    from optparse import OptionParser
    import os

    usage  = "usage: getdecorations XAODFILE [OPTIONS]"
    parser = OptionParser(usage=usage)
    parser.add_option( "-c",action='store',dest='collections', metavar="COL[,...]",\
            default=None,help="collection(s) to check")
    
    (opt,args) = parser.parse_args()
    if len(args) != 1:
    	message = "\033[1;31mERROR\033[1;m Missing mandatory input ROOT file"
    	raise RuntimeError(message)

    # parse the collections
    collections = []
    if opt.collections:
        for i in opt.collections.split(','):
            collections.append(i)

    main(args[0],collections)


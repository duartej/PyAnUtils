#!/usr/bin/env python 
""":script:`getdecorations` -- Dump the list of decorations 
============================================================

.. script:: getdecorations XAODFILE [OPTIONS]
      :platform: Unix
      :synopsis: Dump the name and type of the decorations present in
                 a persistent collection of a xAOD file

	  .. moduleauthor:: Jordi Duarte-Campderros <jorge.duarte.campderros@cern.ch>
                        adapted from an anonymous script found on the ATLAS twikis
"""
# FIXME: TO BE DOCUMENTED

def printOut(colinfodict):
    """
    """
    message = ""
    for name,declist in colinfodict.iteritems():
        message += "Decorators found at {0}\n".format(name)
        sright  = max(map(lambda (x,y): len(y),declist))
        sleft = max(map(lambda (x,y): len(x),declist))
        premesg = "{0:<"+str(sleft)+"} :: {1:<"+str(sright)+"}\n"
        totalline = len(premesg)+sleft+sright
        message += '='*totalline+'\n'
        message += premesg.format("Data Type","Decorator Name")
        message += '-'*totalline+'\n'
        for dectype,decname in sorted(declist,key=lambda (x,y): x):
            message += premesg.format(dectype,decname)
        message += '\n'
    return message

def main(filename,collections):
    """
    """
    import ROOT
    try:
        from AthenaROOTAccess.transientTree import makeTree as MakeTransientTree
    except ImportError:
        ROOT.THtml.LoadAllLibs()
        ROOT.xAOD.Init()
        MakeTransientTree = ROOT.xAOD.MakeTransientTree
    # use cppy instead, but how to deal with the persistent-transient cols?
    
    f = ROOT.TFile.Open(filename)
    if f.IsZombie():
    	message = "\033[31mgetdecorations ERROR\033[m Input '%s' Not Found"
    	raise RuntimeError(message)
    
    # Make the transient tree
    t = MakeTransientTree(f)
    t.GetEntry(0)
    
    if len(collections) == 0:
    	print "Should be included some collection to look at..."
        print "Available collections are:"
        for i in t.GetListOfLeaves(): 
            print " + %s" % (i.GetName())
        return 
    
    reg = ROOT.SG.AuxTypeRegistry.instance()

    # Checking the collections exist
    deco = {}

    for i in collections:
        try:
            obj_container = getattr(t,i)
        except AttributeError,Exception:
            message = "\033[31mgetdecorations WARNING\033[m There is no container"
            message+= "with instance name {0}".format(i)
            print message
            continue
        # Find an entry where we have at least one element
        for iEvt in xrange(t.GetEntries()):
            dummy = t.GetEntry(iEvt)
            if obj_container.size() > 0:
                break
        obj = obj_container.at(0)
        deco[i] = []
        auxids = list(obj.getAuxIDs())
        for auxid in auxids:
            deco[i].append((reg.getTypeName(auxid),reg.getName(auxid)))
            
    print printOut(deco)

if __name__ == '__main__':
    from optparse import OptionParser
    import os

    usage  = "usage: getdecorations XAODFILE [OPTIONS]"
    parser = OptionParser(usage=usage)
    parser.add_option( "-c",action='store',dest='collections', metavar="COL[,...]",\
            default=None,help="collection(s) to check")
    
    (opt,args) = parser.parse_args()
    if len(args) != 1:
    	message = "\033[31mgetdecorations ERROR\033[m Missing mandatory input ROOT file"
    	raise RuntimeError(message)

    # parse the collections
    collections = []
    if opt.collections:
        for i in opt.collections.split(','):
            collections.append(i)

    main(args[0],collections)


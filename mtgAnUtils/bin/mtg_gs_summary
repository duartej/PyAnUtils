#!/usr/bin/env python
""":script:`mtg_gs_summary` -- Geantino shoots related plots
============================================================

.. script:: mtg_gs_summary [OPTIONS]    
      :platform: Unix
      :synopsis: Perform some useful plots from the root
      files created with geantino shoots in full and 
      fast simulation. 
      
      .. moduleauthor:: Jordi Duarte-Campderros <jorge.duarte.campderros@cern.ch>
"""
DEBUG=True
TOLERANCE=1e-9

def gethisto3d(name):
    import ROOT
    ROOT.TH3.AddDirectory(False)
    return ROOT.TH3F(name,'',100,-26100,26100,100,-5000,5000,100,-5000,5000)

def gethisto2d(name):
    import ROOT
    ROOT.TH2.AddDirectory(False)
    return ROOT.TH2F(name,'',200,0,3.1416,200,-3.1416,3.1416)

def gethisto(name):
    import ROOT
    ROOT.TH1.AddDirectory(False)
    return ROOT.TH1F(name,'',200,0,1000)
    
def set_attr_plotobject(gr,**kwd):
    """Set some attributes to a ROOT.THX or ROOT.TGraphXX
    objects

    Parameters
    ----------
    gr: ROOT.TObject (should be TGraph or THX)
        The object to set the attributes
    color: int, optional [Default: a random color is provided]
    linestyle: int, optional [Default: 1]
    markerstyle: int, optional [Default: 20]
    linewidth: int, optional [Default: 2]

    [TO BE PROMOTED TO pyanfucntions or plotsytles]
    """
    from PyAnUtils.pyanfunctions import ExtraOpt

    opt = ExtraOpt( [ ('color',None), ('linestyle',1),
        ('markerstyle',20), ('linewidth',2),
        ('markersize',0.7),
        ('title', ''), 
        ('xtitle', None), ('ytitle',None), ('ztitle',None)] )
    opt.setkwd(kwd)

    if not opt.color:
        import random
        color = int(random.uniform(1,1000))
    else:
        color = opt.color
    
    gr.SetMarkerStyle(opt.markerstyle)
    gr.SetMarkerSize(opt.markersize)
    gr.SetMarkerColor(color)

    gr.SetLineStyle(opt.linestyle)
    gr.SetLineColor(color)
    gr.SetLineWidth(opt.linewidth)

    # Titles 
    gr.SetTitle(opt.title)
    titlesandacces = map(lambda x: (x+'title','Get'+x.upper()+'axis'), \
            [ 'x', 'y', 'z' ])
    for (title,method) in titlesandacces:
        # if defined (i.e. not None)
        if getattr(opt,title):
            getattr(gr,method)().SetTitle(getattr(opt,title))


def validation(trajectorylist,**kwd):
    """Perform some plots to assess the validity of...
    """
    import ROOT
    from PyAnUtils.plotstyles import njStyle as dfStyle
    from PyAnUtils.plotstyles import squaredStyle as sqStyle
    from PyAnUtils.plotstyles import setpalette
    from PyAnUtils.pyanfunctions import ExtraOpt

    opt = ExtraOpt( [('verbose',False)] )
    opt.setkwd(kwd)

    squaredStyle = sqStyle()
    squaredStyle.SetOptStat(0)
    
    style = dfStyle()
    style.cd()
    style.SetOptStat(0)
    
    
    geometry=trajectorylist[0].origin()
    # --- Plot of theta,phi
    g = ROOT.TGraph()
    # --- Check if there are counterparts in the other geometry
    #     A graph with this points is also plotted
    g2 = ROOT.TGraph()
    # --- Plot of number of updates
    gupdates = ROOT.TGraph2D()

    # Obtain the points
    ts = sorted(trajectorylist)
    k = 0
    verbmes = ''
    for i,t in enumerate(ts):
        g.SetPoint(i,t.eta(),t.phi())
        gupdates.SetPoint(i,t.eta(),t.phi(),t.number_of_crossed_volumes())
        if not t.getmirror():
            verbmes += "Not found at eta=%6.3f, phi=%6.3f" % (t.eta(),t.phi())
            g2.SetPoint(k,t.eta(),t.phi())
            k+=1
    verbmes += ""
    
    # --- Actual plotting
    # - theta, phi plot
    set_attr_plotobject(g,color=1)
    
    ROOT.gROOT.SetBatch()
    c = ROOT.TCanvas()
    frame = ROOT.TH2F('frame','',1,-4.6,4.6,1,-3.1416,3.1416)
    ROOT.gStyle.SetOptStat(0)
    set_attr_plotobject(frame,\
            title='[GS-Validation]: Trajectory points on %s geometry' % geometry,\
            xtitle='#theta',ytitle='#phi',color=0)
    frame.Draw()
    g.Draw("PL")

    c.SaveAs('validation_theta_phi_'+geometry+'.png')
    c.Close()
    # -- End Plot of theta,phi

    # --- Missing points plot
    counterpart = "FULL"
    if geometry == counterpart:
        counterpart = "FAST"
    set_attr_plotobject(g2,color=ROOT.kRed+3,markerstyle=34,markersize=2)
    print "="*80
    print "[GS-Validation] Checking the points at %s geometry without"\
            " a counterpart in %s" % (geometry,counterpart)
    if opt.verbose:
        print verbmes
    print "%i points in %s were not simulated" % (g2.GetN(),counterpart)
    print "="*80

    if g2.GetN() != 0:
        set_attr_plotobject(frame,\
                title='[GS-Validation]: Points simulated at %s but not'\
                  ' at %s geometry' % (geometry,counterpart),
                xtitle='#theta',ytitle='#phi')
        c = ROOT.TCanvas()
        frame.Draw()
        g2.Draw("P")
        
        c.SaveAs('validation_nomirrors_'+geometry+'.png')
        c.Close()
    # -- End missing points
    
    # -- Number of crossing volumes
    squaredStyle.cd()
    c = ROOT.TCanvas()
    setpalette('grayscale')
    set_attr_plotobject(frame,\
            title='[GS-Validation]: Number of crossing volumes on %s geometry' % geometry,\
            xtitle='#theta',ytitle='#phi')
    frame.Draw()
    gupdates.Draw("COLZSAME")
    c.SaveAs('validation_crossingpoints_'+geometry+'.png')

    g.Delete()
    g2.Delete()


def plot_radlength(trajectorylist,variable,**kwd):
    """
    """
    import ROOT
    from PyAnUtils.pyanfunctions import ExtraOpt
    from PyAnUtils.plotstyles import squaredStyle as dfStyle

    style = dfStyle()
    style.cd()
    style.SetOptStat(0)

    # Only theta,phi,eta
    if not variable in ['theta','phi','eta']:
        raise AttributeError("Not valid variable '%s' to plot" % variable)

    opt = ExtraOpt( [('xmin',0),('xmax',3.1416),('doplot',True)] )
    opt.setkwd(kwd)

    geometry = trajectorylist[0].origin()
    # --- Prepare to plot
    tordered = sorted(trajectorylist,key=lambda x: getattr(x,variable)())
    gt = ROOT.TGraph()
    set_attr_plotobject(gt,color=ROOT.kBlack)
    ymax = -1e99
    ymin = 0
    for (i,t) in enumerate(tordered):
        x0 = t.getX0()
        gt.SetPoint(i,getattr(t,variable)(),x0)
        if ymax < x0:
            ymax = x0
        if ymin > x0:
            ymin = x0
    if not opt.doplot:
        return gt

    ROOT.gROOT.SetBatch()
    c = ROOT.TCanvas()
    frame = ROOT.TH2F('frame','',1,opt.xmin,opt.xmax,1,ymin,1.1*ymax)
    set_attr_plotobject(frame,title='Radiation lenght vs #'+variable+
            ', %s' % geometry,\
            xtitle='#'+variable,ytitle='Radiation Length/X_{0}')
    ROOT.gStyle.SetOptStat(0)
    frame.Draw()
    gt.Draw("PL")
    c.SaveAs('radlength_'+variable+'_'+geometry+'.png')
    c.Close()

    return gt

def plot_radlength_2d(trajectorylist,var1,var2,**kwd):
    """
    """
    import ROOT
    from PyAnUtils.pyanfunctions import ExtraOpt
    from PyAnUtils.plotstyles import squaredStyle as dfStyle
    from PyAnUtils.plotstyles import setpalette

    style = dfStyle()
    style.cd()
    style.SetOptStat(0)

    # Only theta,phi,eta
    for variable in [var1,var2]:
        if not variable in ['theta','phi','eta']:
            raise AttributeError("Not valid variable '%s' to plot" % variable)

    opt = ExtraOpt( [('xmin_var1',-4.5),('xmax_var1',4.5),
            ('xmin_var2',-3.1416), ('xmax_var2',3.1416), 
            ('doplot',True), ('relative_diff',False),
            ('verbose',False)] )
    opt.setkwd(kwd)

    geometry = trajectorylist[0].origin()
    # --- Prepare to plot
    tordered = sorted(trajectorylist,key=lambda x: getattr(x,var1)())
    # --- Fill the 2D and the difference between them (just when FAST?)
    gt    = ROOT.TGraph2D()
    gdiff = ROOT.TGraph2D()
    gnopresent = ROOT.TGraph()
    idiff = 0
    zmax = -1e99
    zmin = 0
    zmaxdiff = -1e99
    zmindiff = 0
    denominator = 1.0
    inpresent = 0
    for (i,t) in enumerate(tordered):
        x0 = t.getX0()
        if opt.relative_diff:
            denominator = x0/100.0
        var1value = getattr(t,var1)()
        var2value = getattr(t,var2)()
        gt.SetPoint(i,var1value,var2value,x0)
        if zmax < x0:
            zmax = x0
        if zmin > x0:
            zmin = x0
        # differences 
        if t.getmirror():
            x0mirror = t.getmirror().getX0()
            try:
                x0diff = (x0-x0mirror)/denominator
            except ZeroDivisionError:
                # Just move from the zero and giving
                # just the distance. 
                x0diff = (x0-x0mirror)*100.
                # Print a warning if in x0mirror THERE IS
                # radiation lenght != 0
                if abs(x0diff) > TOLERANCE:
                    if opt.verbose:
                        print "\033[1;33mWARNING\033[1;m The trajectory (%6.4f,%6.4f)"\
                                " do not passed through any material in" \
                                % (var1value,var2value)
                        print "%s geometry. In its counterpart "\
                                "simulation x0=%6.4f" % (geometry,x0mirror)
                        gnopresent.SetPoint(inpresent,var1value,var2value)
                        inpresent+=1
            gdiff.SetPoint(idiff,var1value,var2value,x0diff)
            idiff += 1
            if zmaxdiff < x0diff:
                zmaxdiff = x0diff
            if zmindiff > x0diff:
                zmindiff = x0diff
    if not opt.doplot:
        return gt,gdiff
    
    # -- Plots and cosmethics
    counterpart = "FULL"
    if geometry == "FULL":
        counterpart = "FAST"
    
    ROOT.gROOT.SetBatch()
    c = ROOT.TCanvas()
    frame = ROOT.TH2F('frame','',1,opt.xmin_var1,opt.xmax_var1,1,\
                         opt.xmin_var2,opt.xmax_var2)
    
    # -- No present graph
    if gnopresent.GetN() > 0:
        set_attr_plotobject(frame,title='Trajectories not present at %s'\
                ' but at %s' % (geometry,counterpart),\
                xtitle='#'+var1,ytitle='#'+var2)
        set_attr_plotobject(gnopresent,color=ROOT.kRed+3)
        frame.Draw()
        gnopresent.Draw("P")
        c.SaveAs('nopresent_'+var1+'_'+var2+'_'+geometry+'.png')
        print "="*80
        print "%i points in %s"\
                " have no radiation lenght"\
                " (from a total of %i)" % (gnopresent.GetN(),geometry,len(trajectorylist))
        print "="*80
    # --- End no present graph

    # --- Radiation lenght (COLZ) 
    set_attr_plotobject(frame,title='Radiation lenght vs #'+var1+' #'+var2+
            ', %s' % geometry,\
            xtitle='#'+var1,ytitle='#'+var2,ztitle='Radiation Length/X_{0}')
    frame.Draw()
    setpalette('inv_darkbody')
    gt.Draw("SAMECOLZ")
    c.SaveAs('radlength_'+var1+'_'+var2+'_'+geometry+'.png')
    # --- End Radiation lenght (COLZ) 
    
    # --- Radiation length 2D LEGO
    frame3d = ROOT.TH3F('frame3d','',1,opt.xmin_var1,opt.xmax_var1,1,\
                         opt.xmin_var2,opt.xmax_var2,1,zmin,1.1*zmax)
    set_attr_plotobject(frame3d,title='Radiation lenght vs #'+var1+' #'+var2+
            ', %s' % geometry,\
            xtitle='#'+var1,ytitle='#'+var2,ztitle='Radiation Length/X_{0}')
    gt.Draw()
    gt.GetHistogram().SetContour(99)
    frame3d.Draw()
    gt.Draw("LEGO2SAME")
    c.SaveAs('radlength_'+var1+'_'+var2+'_'+geometry+'_LEGO.png')
    # --- End Radiation length 2D LEGO
    
    # --- Rad. length diff plots
    if abs(zmindiff) > abs(zmaxdiff):
        setpalette('darkbody')
    plottitle = 'Difference between simulations %s - %s ' % (geometry,counterpart)
    ztitle    = 'Radiation Length '+geometry+'-'+counterpart+'/X_{0}'
    plotname  = 'radlength_'+var1+'_'+var2+'_'+geometry+'_DIFF'
    if opt.relative_diff:
        plottitle = plottitle+'[%s]' % ('%')
        ztitle = ztitle+' [%s]' % ('%') 
        plotname+= '_REL'
    plotname+='.png'
    frame.SetTitle(plottitle)
    frame.GetZaxis().SetTitle(ztitle)
    gdiff.Draw()
    gdiff.GetHistogram().SetContour(99)
    frame.Draw()
    gdiff.Draw("SAMECOLZ")
    c.SaveAs(plotname)
    # --- End Rad. length diff plots
    
    # --- Rad. length diff plots 2D lego
    frame3d.GetZaxis().SetLimits(zmindiff,zmaxdiff)
    frame3d.SetTitle(plottitle)
    frame3d.GetZaxis().SetTitle(ztitle)
    c.SetPhi(45)
    c.SetTheta(14)
    frame3d.Draw()
    gdiff.Draw("SURF3SAME")
    pname,suffix = plotname.split('.')
    legoplotname = pname+'_LEGO.'+suffix
    c.SaveAs(legoplotname)
    c.Close()
    # --- Rad. length diff plots 2D lego

    return gt,gdiff

def same_canvas_plots(glist,**kwd):
    """Plot in the same canvas a list of objects

    Parameters
    ----------
    glist: [ ROOT.TObject ]
        List of objects (inheriting from TGraph or THX) 
    """
    pass

def main(fullfn,fastfn,verbose,do_validation,rel_diffs):
    """Steering funtion. Performs the validation plots and 
    the 1 and 2-D plots
    """
    from mtgAnUtils.mtgtrajectories import build_trajectory_lists

    # -- Getting the trajectories
    print "Getting trajectories"
    fulllist,fastlist = build_trajectory_lists(fullfn,fastfn)
    if do_validation:
        # -- Plot some validation plots
        print "-"*80
        print "1. Validation plots for 'FULL' and FAST geometries"
        print "-"*80
        validation(fulllist,verbose=verbose)
        validation(fastlist,verbose=verbose)
    # --- Plot radiation length plots 1D with respect eta and phi
    print "-"*80
    print "2. Radiation length 1-d plots (phi and eta)"
    print "-"*80
    g_full_eta = plot_radlength(fulllist,'eta',xmin=-4.5,xmax=4.5)
    g_full_phi = plot_radlength(fulllist,'phi',xmin=-3.1416,xmax=3.1416)
    g_fast_eta = plot_radlength(fastlist,'eta',xmin=-4.5,xmax=4.5)
    g_fast_phi = plot_radlength(fastlist,'phi',xmin=-3.1416,xmax=3.1416)
    # --- Plot radiation length plots 2D with respect eta and phi
    print "-"*80
    print "3. Radiation length 2-d plots"
    print "-"*80
    g_full,g_full_diff = plot_radlength_2d(fulllist,'eta','phi',\
            xmin_var1=-4.5,xmax_var1=4.5,xmin_var2=-3.1416,xmax_var2=3.1416,\
            relative_diff=rel_diffs,verbose=verbose)
    g_fast,g_fast_diff = plot_radlength_2d(fastlist,'eta','phi',\
            xmin_var1=-4.5,xmax_var1=4.5,xmin_var2=-3.1416,xmax_var2=3.1416,\
            relative_diff=rel_diffs,verbose=verbose)

    print "FINISHED! Bye.."


if __name__ == '__main__':
    import os
    from optparse import OptionParser,OptionGroup
    
    cwd = os.getcwd()
    parser = OptionParser()
    parser.set_defaults(fullsim=os.path.join(cwd,'ISFG4SimKernel.root'),\
    		fastsim=os.path.join(cwd,'ISFFatras.root'),\
                validation=False,relative_diff=False,verbose=False)
    
    parser.add_option( '--full', action='store', type='string', dest='fullsim',\
    		help="Full (Geant4) simulation root file [ISFG4SimKernel.root]")
    parser.add_option( '--fast', action='store', type='string', dest='fastsim',\
    		help="Fast simulation root file [ISFFatras.root]")
    parser.add_option( '--validation', action='store_true', dest='validation',\
    		help="Perform validation plots [False]")
    parser.add_option( '-r','--relative-diff', action='store_true', dest='relative_diff',\
    		help="Perform the 2D plots plotting the relative differences"\
                       " between geometries [False]")
    parser.add_option( '-v','--verbose', action='store_true', dest='verbose',\
    		help="Verbose output [False]")
    
    (opt, args)=parser.parse_args()	
    # See main function
    main(opt.fullsim,opt.fastsim,opt.verbose,opt.validation,opt.relative_diff)


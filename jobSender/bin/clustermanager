#!/usr/bin/env python
""":script:`clustermanager` -- Send, check and retrieve jobs to a cluster
=================================================================================

.. script:: clustermanager <send|retrieve> [OPTIONS]    
      :platform: Unix
      :synopsis: Send, check and retrieve jobs to a cluster. 
.. moduleauthor:: Jordi Duarte-Campderros <jorge.duarte.campderros@cern.ch>
"""

DEBUG=True
JOBEVT=500
from jobSender.workenvfactory import athenajob,blindjob
from jobSender.clusterfactory import cluster_builder
from jobSender.jobssender     import bookeepingjobs,accessingjobsinfo,job

if __name__ == '__main__':
    from optparse import OptionParser,OptionGroup
    import os

    usage  = "usage: %prog <send|resubmit|reconfigure|retrieve|kill> [options]"
    parser = OptionParser(usage=usage)

    parser.add_option("-w","--workingpath",action="store",dest="workingpath",\
            help="Prepare/send the jobs in this path")
    parser.add_option('-b','--bashname',action='store',dest='bashname',
            help='name of the bash script without extension (the script'+\
                    ' used to send the job, which defines also the name of the job')
    parser.add_option('-s','--dry-run',action='store_true',dest='dryrun',
            help='Simulate the action but does not send the commands to the cluster')

    sendopt= OptionGroup(parser,"Send mode options",
            "Options valid only when it is called with 'send' arg")
    sendopt.add_option("-t","--type",action="store",dest="type_we",\
            default='athena',help="Name of the type of job: <athena|reco_tf|blind> [athena]")
    sendopt.add_option("--specific-file",action="store",dest="optionalfile",\
            help="Extra file for the blind job, specific related to the job-index."\
            " The actual format should be like 'filenama_%i.suff'")
    sendopt.add_option("-j","--jobOption",action="store",dest="joboption",\
            help="Name of the python jobOption file")
    sendopt.add_option("--extra-asetup",action="store",dest="asetup_options",\
            default='',help="Space separated extra options to be delivered to the asetup")
    sendopt.add_option("-q","--queue",action="store",dest="queue",\
            help="Name of the queue to be send the job [Default: None]")
    sendopt.add_option("--extra-opts",action="store",dest="extra_opts",\
            help="Extra options to send the job (ex: '-l mem=5gb,vmem=10gb')."\
            " Note that the options should be surrounded by \" [Default: None]")
    sendopt.add_option("-i","--inputfiles",action="store",dest="filenames",\
            help="Input root files (can be regular expresion)")
    sendopt.add_option("-n","--njobs",action="store",dest="njobs",\
            help="Force the number of jobs to be sent [10]")
    sendopt.add_option("-e","--evtsmax",action="store",dest="evtsmax",\
            help="Number of events to be processed")
    parser.add_option_group(sendopt)

    #retropt= OptionGroup(parser,"Retrieve mode options",
    #        "Options valid only when it is called with 'retrieve' arg")
    #parser.add_option_group(retropt)
    
    resubmitopt= OptionGroup(parser,"Resubmit job mode options",
            "Options valid only when it is called with 'resubmit' arg")
    resubmitopt.add_option("-r","--list-resubmit",action="store",dest="joblisttoresubmit",\
            help="List of jobs to be resubmitted, if this option is not activated"\
                " all 'finished' (with 'fail' state) and 'aborted' jobs will be resubmitted")
    parser.add_option_group(resubmitopt)
    
    reconfigopt= OptionGroup(parser,"Reconfigure job mode options",
            "Options valid only when it is called with 'reconfigure' arg")
    reconfigopt.add_option("-c","--list-reconfig",action="store",dest="joblisttoreconfig",\
            help="List of jobs to be reconfigured, if this option is not activated"\
                " all jobs in None state are reconfigured")
    parser.add_option_group(reconfigopt)
    
    killopt= OptionGroup(parser,"Kill job mode options",
            "Options valid only when it is called with 'kill' arg")
    killopt.add_option("-k","--list-kill",action="store",dest="joblisttokill",\
            help="List of jobs to be killed, if this option is not activated"\
                " all running jobs will be killed")
    parser.add_option_group(killopt)

    parser.set_defaults(bashname='clusterRPVMCInfoDVMuons',dryrun=False,
            joboption='testBjetSliceAthenaTrigRDO.py',
            filenames = '/afs/cern.ch/user/d/duarte/work/public/datasets/'\
                    'mc14_13TeV.177568.Pythia_AUET2BCTEQ6L1_RPV_vtx2_LSP100'\
                    '_mujets_filtDL_Rmax300.recon.RDO.e3355_s1982_s2008_r5787'\
                    '_tid04569111_00/*.pool.root.*',
                    type_we='athena',
                    optionalfile=None,
                    njobs=10,
                    evtsmax = -1,
                    queue=None,
                    workingpath='./')

    (opt,args) = parser.parse_args()
    print "================================================================"
    print "\033[1;33mWARNING:\033[1;m DEVELOPMENT VERSION, use at your own risk"
    print "================================================================"

    if len(args) != 1:
        raise RuntimeError('clustermanager must be called either with "send|retrieve"'\
                ' arguments')
    if args[0] == 'send':
        cwd = os.getcwd()
        os.chdir(os.path.abspath(opt.workingpath))
        
        # Work environment and cluster definitions
        if opt.type_we == 'athena':
            we_instance = athenajob(opt.bashname,opt.joboption,opt.filenames,'jo',
                    njobs=opt.njobs,evtmax=opt.evtsmax)
        elif opt.type_we == 'reco_tf':
            we_instance = athenajob(opt.bashname,opt.joboption,opt.filenames,'tf',
                    njobs=opt.njobs,evtmax=opt.evtsmax)
        elif opt.type_we == 'blind':
            we_instance = blindjob(opt.bashname,opt.optionalfile,njobs=opt.njobs,
                    evtmax=opt.evtsmax)
        else:
            raise AttributeError('-t option variable not recognized: "{0}"'.format(opt.type_we))
        cluster = cluster_builder(simulate=opt.dryrun,queue=opt.queue,extra_opts=opt.extra_opts)
        # Job instantation
        js   = job(cluster,we_instance)
        js.preparejobs(opt.asetup_options)
        js.submit()
        bookeepingjobs(js)
        os.chdir(cwd)

    elif args[0] == 'reconfigure':
        import glob
        # Only can be done in failed jobs: None state
        print "Searching jobs available to reconfigure...",
        try:
            shfile = glob.glob(os.path.join(opt.workingpath,'.presentjobs'))[0]
        except IndexError:
            raise RuntimeError('Not found jobs in the folder "%s"(, '\
                ' i.e. not found ".presentjobs" file) ' % opt.workingpath)
        js = accessingjobsinfo(shfile)
        if not opt.joblisttoreconfig:
            indexjobstobereconfig = map(lambda x: x, js.getdictof(None).keys())
        else:
            indexjobstobereconfig = map(lambda x: int(x),opt.joblisttoreconfig.split(','))
        jobstobereconfig = filter(lambda x: x.index in indexjobstobereconfig,js.getlistoftasks())
        print "%s" % str(map(lambda x: x.index,jobstobereconfig))
        js.reconfigure(jobstobereconfig)
        bookeepingjobs(js)

    
    elif args[0] == 'resubmit':
        import glob
        # Only can be done in failed jobs: (finished,fail) or (aborted,*)
        print "Searching jobs available to resubmit...",
        try:
            shfile = glob.glob(os.path.join(opt.workingpath,'.presentjobs'))[0]
        except IndexError:
            raise RuntimeError('Not found jobs in the folder "%s"(, '\
                ' i.e. not found ".presentjobs" file) ' % opt.workingpath)
        js = accessingjobsinfo(shfile)
        if not opt.joblisttoresubmit:
            indicesfromfinished = map(lambda x: x[0],\
                    filter(lambda (ind,(state,status)): status == 'fail',js.getdictof('finished').iteritems()))
            indicesfromaborted  = map(lambda x: x, js.getdictof('aborted').keys())
            indicesfromconfig   = map(lambda x: x, js.getdictof('configured').keys())
            indexjobstoberesubmitted = indicesfromfinished+indicesfromaborted+indicesfromconfig
        else:
            indexjobstoberesubmitted = map(lambda x: int(x),opt.joblisttoresubmit.split(','))
        jobstoberesubmitted = filter(lambda x: x.index in indexjobstoberesubmitted,js.getlistoftasks())
        print "%s" % str(map(lambda x: x.index,jobstoberesubmitted))
        js.resubmit(jobstoberesubmitted)
        bookeepingjobs(js)

    elif args[0] == 'retrieve':
        import glob
    
        print "Searching jobs..."
        try:
            shfile = glob.glob(os.path.join(opt.workingpath,'.presentjobs'))[0]
        except IndexError:
            raise RuntimeError('Not found jobs in the folder "%s"(, '\
                ' i.e. not found ".presentjobs" file) ' % opt.workingpath)
        js = accessingjobsinfo(shfile)
        #js.states  = { None: [], 'configured': [], 'submitted': [],
        #        'running': [], 'finished': [], 'aborted': []}
        js.update()                                                               
        js.showstates()

        bookeepingjobs(js)
        
    elif args[0] == 'kill':
        import glob

        print "Searching jobs to be killed...",
        try:
            shfile = glob.glob(os.path.join(opt.workingpath,'.presentjobs'))[0]
        except IndexError:
            raise RuntimeError('Not found jobs in the folder "%s"(, '\
                ' i.e. not found ".presentjobs" file) ' % opt.workingpath)
        js = accessingjobsinfo(shfile)
        if not opt.joblisttokill:
            indexjobstobekilled = map(lambda x: x.index,js.getlistoftasks())
        else:
            indexjobstobekilled  = map(lambda x: int(x),opt.joblisttokill.split(','))
        jobstobekill = filter(lambda x: x.index in indexjobstobekilled,js.getlistoftasks())
        print "%s" % str(map(lambda x: x.index,jobstobekill))
        js.kill(jobstobekill)
        bookeepingjobs(js)
    else:
        raise RuntimeError('Not valid argument "%s".'\
                ' Valid args: send|resubmit|reconfigure|retrieve|kill' % args[0])




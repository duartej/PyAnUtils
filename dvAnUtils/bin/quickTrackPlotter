#!/usr/bin/env python
""":script:`quickTrackPlotter` -- perform some quick plots related with tracks
==============================================================================

.. script:: quickTrackPlotter [OPTIONS]    
      :platform: Unix
      :synopsis: Perform some quick plots related with tracks 

	  .. moduleauthor:: Jordi Duarte-Campderros <jorge.duarte.campderros@cern.ch>
"""

def ismatchedtrack(track,tracksOther,verbose,dRcut = 0.01):
    """xAOD::TrackParticle inputs
    """
    from math import sqrt

    tlength   = len(tracksOther)

    eta = track.eta()
    phi = track.phi()
    
    for i in xrange(tlength):
        etaOther = tracksOther[i].eta()
        phiOther = tracksOther[i].phi()
        if sqrt( (eta-etaOther)**2.+(phi-phiOther)**2. ) < dRcut:# and \
                    #tracks['nHits'] == tracksOther["nHits"] :
            if verbose:
                print "="*80
                print "HighD0 track matched with a regular one!"
                print "dR between tracks: %.5f" % sqrt( (eta-etaOther)**2.+(phi-phiOther)**2. )
                #print "Other parameters:"
                #header = "       "
                #for _obs in parameters.keys():
                #    header += ("%s%is  " % ('%',lengths[_obs])) % _obs
                #tracksd0line = "Highd0 :"
                #tracksline   = "Regular:"
                #for _obs in tracks.keys():
                #    tracksd0line   += ("%s%i.3f  ") % ('%',lengths[_obs]) % tracks[_obs][i] 
                #    tracksline += ("%s%i.3f  ") % ('%',lengths[_obs]) % tracksOther[_obs][k] 
                #print header
                #print tracksd0line
                #print tracksline
            # one match is enough to discard the track
            return True
            # Extra info to be matched?
    return False


def getcollection(tree,name):
    """
    """
    k =  filter(lambda x: x.GetName().lower().find(name.lower()) != -1,\
            tree.GetListOfBranches())
    # not including auxiliar
    return filter(lambda x: x.GetName().lower().find('aux.') == -1, k)# not including auxiliar



def setuphistos(hcont,name,nbins,xlow,xmax):
    """
    """
    regtitle = "regular tracking"
    highd0tl = "High-d_{0}  retracking"
    hcont.create_and_book_histo(name      ,regtitle,nbins,xlow,xmax,description='Regular reco tracks')
    hcont.create_and_book_histo(name+"_h" ,highd0tl,nbins,xlow,xmax,description='re-tracked (not-matched)')
    hcont.create_and_book_histo(name+"_hA",highd0tl,nbins,xlow,xmax,description='re-tracked (all)')
    # -- Associated histograms: plotted in the same canvas
    hcont.associated([name,name+'_h',name+'_hA'])

def doplothistos(hcont,name,xtitle,ytitle,plotname,**kwd):
    """Prepare and plot the associated histos
    """
    
    from PyAnUtils.pyanfunctions import set_attr_plotobject
    from PyAnUtils.plotstyles import njStyle
    import ROOT

    stl = njStyle()
    stl.cd()
    ROOT.gROOT.ForceStyle()

    c = ROOT.TCanvas()
    rt_color = ROOT.TColor.GetColor(48,70,116)
    hd_color = ROOT.TColor.GetColor(87,152,52)
    hm_color = ROOT.TColor.GetColor(174,136,60)
    
    h   = getattr(hcont,name)
    h.SetFillColorAlpha(rt_color,0.3)
    
    h_h = getattr(hcont,name+"_h")
    h_h.SetFillColorAlpha(hd_color,0.3)
    
    h_hA= getattr(hcont,name+"_hA")
    h_hA.SetFillColorAlpha(hm_color,0.3)

    set_attr_plotobject(h,   xtitle=xtitle,ytitle=ytitle,color=rt_color)
    set_attr_plotobject(h_h, xtitle=xtitle,ytitle=ytitle,color=hd_color,linestyle=5)
    set_attr_plotobject(h_hA,xtitle=xtitle,ytitle=ytitle,color=hm_color,linestyle=2)
    c.SetLogy()
    plotnamelog = plotname.replace(".","_log.")
    hcont.plot(name,plotnamelog,c,**kwd)
    c.SetLogy(0)
    hcont.plot(name,plotname,c,**kwd)

def main(filenames,plotsuf,**kwd):
    """
    """
    import sys
    import ROOT
    from math import sqrt
    from struct import unpack
    from PyAnUtils.retrievetrees import xaodtree
    from PyAnUtils.pyanfunctions import ExtraOpt,set_attr_plotobject
    from PyAnUtils.plotstyles import njStyle,setpalette
    from PyAnUtils.histocontainer import HistoContainer

    opt = ExtraOpt( [('d0range',80), ('z0range',1500.), ('normalize', True)] )
    opt.setkwd(kwd)
    
    ROOT.gROOT.SetBatch()

    out = []
    for i in filenames:
        out.append(xaodtree(i))
    # Set the track particle
    t = out[0]
    # And the collection we are going to use
    t.activate_variable("InDetTrackParticles")
    tracks_normal  = t.InDetTrackParticles
    t.activate_variable("InDetHighD0TrackParticles")
    tracks_highd0 = t.InDetHighD0TrackParticles
    
    # ----------------------------------------
    # --- Histograming 
    h = HistoContainer()
    # D0
    setuphistos(h,"d0",200,-opt.d0range,opt.d0range)
    setuphistos(h,"err_d0",100,-3.,3.)
    
    # Z0
    setuphistos(h,"z0",200,-opt.z0range,opt.z0range)
    setuphistos(h,"err_z0",100,-1.,1.)

    # 2d d0 vs z0
    h.create_and_book_histo("d0z0_h","High-d_{0} retracking",100,-opt.d0range,opt.d0range,\
            npoints_y=100,ylow=-opt.z0range,yhigh=opt.z0range)
    
    # number of tracks per event
    setuphistos(h,"nt",200,0,701)

    # Quality
    setuphistos(h,"chi2Nof",100,0,12.)

    # Hits 
    setuphistos(h,"radFirstHit",500,0,500.)

    # -- Pixel hits
    setuphistos(h,"nPixelHits",11,0,10.)

    # -- SCT hits
    setuphistos(h,"nSCTHits",21,0,20.)

    # -- TRT hits
    setuphistos(h,"nTRTHits",51,0,50.)

    # -- Total hits
    setuphistos(h,"nHits",71,0,70.)
    # ------
    
    print "------------------------------------------------------"
    totalregrec   = 0
    totalrechighd0= 0 
    realnewhighd0 = 0
    # --- Progress bar :)
    pointpb = float(t.getentries())/100.0
    for i in xrange(t.getentries()):
        t.getentry(i)
        sys.stdout.write("\r\033[1;34mINFO\033[1;m Extracting track info"+\
                    " [ "+"\b"+\
                    str(int(float(i)/pointpb)+1).rjust(3)+"%]")
        sys.stdout.flush()
        #print "[%i] Number of particles:      %i       %i" % (i,tracksInDet_normal.size(),tracksInDet_highd0.size())
        regulartracks = []
        for k in xrange(tracks_normal.size()):
            track = tracks_normal[k]
            # Perigee parameters
            h.d0.Fill(track.d0())
            h.err_d0.Fill(track.definingParametersCovMatrixVec()[0]/track.d0())
            h.z0.Fill(track.z0())
            h.err_z0.Fill(track.definingParametersCovMatrixVec()[1]/track.z0())
            # quality
            h.chi2Nof.Fill(track.chiSquared()/track.numberDoF())
            # hits
            h.radFirstHit.Fill(track.radiusOfFirstHit())
            pixel = unpack('B',track.auxdataConst('unsigned char')('numberOfPixelHits'))[0]
            sct   = unpack('B',track.auxdataConst('unsigned char')('numberOfSCTHits'))[0]
            trt   = unpack('B',track.auxdataConst('unsigned char')('numberOfTRTHits'))[0]
            h.nPixelHits.Fill(pixel)
            h.nSCTHits.Fill(sct)
            h.nTRTHits.Fill(trt)
            h.nHits.Fill(pixel+sct+trt)
            # Keep the track to compare
            regulartracks.append(track)
        nmatched = 0
        for k in xrange(tracks_highd0.size()):
            trackH = tracks_highd0[k]
            # Fill all the tracks
            # Perigee parameters
            h.d0_hA.Fill(trackH.d0())
            h.err_d0_hA.Fill(trackH.definingParametersCovMatrixVec()[0]/trackH.d0())
            h.z0_hA.Fill(trackH.z0())
            h.err_z0_hA.Fill(trackH.definingParametersCovMatrixVec()[1]/trackH.z0())
            # quality
            h.chi2Nof_hA.Fill(trackH.chiSquared()/trackH.numberDoF())
            # hits
            h.radFirstHit_hA.Fill(trackH.radiusOfFirstHit())
            pixel = unpack('B',trackH.auxdataConst('unsigned char')('numberOfPixelHits'))[0]
            sct   = unpack('B',trackH.auxdataConst('unsigned char')('numberOfSCTHits'))[0]
            trt   = unpack('B',trackH.auxdataConst('unsigned char')('numberOfTRTHits'))[0]
            h.nPixelHits_hA.Fill(pixel)
            h.nSCTHits_hA.Fill(sct)
            h.nTRTHits_hA.Fill(trt)
            h.nHits_hA.Fill(pixel+sct+trt)
            # Just care about the new ones
            #matched = filter(lambda (eta,phi): sqrt((trackH.eta()-eta)**2.+(trackH.phi()-phi)**2.) < 0.001,reg_etaphi)
            if not ismatchedtrack(trackH,regulartracks,False,0.05):
                h.d0_h.Fill(trackH.d0())
                h.err_d0_h.Fill(trackH.definingParametersCovMatrixVec()[0]/trackH.d0())
                h.z0_h.Fill(trackH.z0())
                h.err_z0_h.Fill(trackH.definingParametersCovMatrixVec()[1]/trackH.z0())
                h.chi2Nof_h.Fill(trackH.chiSquared()/trackH.numberDoF())
                h.radFirstHit_h.Fill(trackH.radiusOfFirstHit())
                h.d0z0_h.Fill(trackH.d0(),trackH.z0())
                h.nPixelHits_h.Fill(pixel)
                h.nSCTHits_h.Fill(sct)
                h.nTRTHits_h.Fill(trt)
                h.nHits_h.Fill(pixel+sct+trt)
            else:
                nmatched += 1
        # Total number of reco-tracks
        h.nt.Fill(tracks_normal.size())
        nt_non_matched =tracks_highd0.size()-nmatched
        if nt_non_matched < 0:
            nt_non_matched = 0
        h.nt_h.Fill(nt_non_matched)
        h.nt_hA.Fill(tracks_highd0.size())
        # --- Not needed anymore with the nt-histos...
        totalregrec += tracks_normal.size()
        totalrechighd0+=tracks_highd0.size()
        realnewhighd0+= nt_non_matched
    print 
    print " --- Total Regular reconstructed tracks                                     : %i" %totalregrec
    print " --- Total high-d0 reconstructed tracks                                     : %i" %totalrechighd0
    print " --- Total high-d0 tracks really news (not matched with regular reco tracks): %i" % realnewhighd0


    #==========================================================================
    # Drawing
    
    # -- D0
    doplothistos(h,"d0",'d_{0} [mm]','A.U.',"regular_vs_highd0_tracks_d0."+plotsuf,normalize=opt.normalize)
    doplothistos(h,"err_d0",'\sigma_{d_{0}}/d_{0}','A.U.',"regular_vs_highd0_tracks_errd0."+plotsuf,normalize=opt.normalize)
    
    # -- Z0
    doplothistos(h,"z0",'z_{0} [mm]','A.U.',"regular_vs_highd0_tracks_z0."+plotsuf,legy=0.9,normalize=opt.normalize)
    doplothistos(h,"err_z0",'\sigma_{z_{0}}/z_{0}','A.U.',"regular_vs_highd0_tracks_errz0."+plotsuf,normalize=opt.normalize)
    
    # -- Chi2Nof
    doplothistos(h,"chi2Nof",'\chi^{2}/N_{dof}','A.U.',"regular_vs_highd0_tracks_chi2Nof."+plotsuf,normalize=opt.normalize)
    
    # -- First hit radius
    doplothistos(h,"radFirstHit",'r_{first hit} [mm]','A.U.',"regular_vs_highd0_tracks_radFirstHit."+plotsuf,normalize=opt.normalize)
    
    # -- Pixel hit
    doplothistos(h,"nPixelHits",'N_{Pixel hits}','A.U.',"regular_vs_highd0_tracks_nPixelHits."+plotsuf,normalize=opt.normalize)
    
    # -- SCT hit
    doplothistos(h,"nSCTHits",'N_{SCT hits}','A.U.',"regular_vs_highd0_tracks_nSCTHits."+plotsuf,normalize=opt.normalize)
    
    # -- TRT hit
    doplothistos(h,"nTRTHits",'N_{TRT hits}','A.U.',"regular_vs_highd0_tracks_nTRTHits."+plotsuf,normalize=opt.normalize)
    
    # -- Number of total hits
    doplothistos(h,"nHits",'N_{hits}','A.U.',"regular_vs_highd0_tracks_nHits."+plotsuf,normalize=opt.normalize)
    
    # -- Nt
    doplothistos(h,"nt",'N_{t}','A.U.',"regular_vs_highd0_tracks_nt."+plotsuf,options="H",normalize=opt.normalize)
    
    # Special 2D
    from PyAnUtils.plotstyles import njStyle,setpalette
    stl = njStyle()
    stl.cd()
    ROOT.gROOT.ForceStyle()
    setpalette('gray')

    c = ROOT.TCanvas()
    set_attr_plotobject(h.d0z0_h,xtitle='d_{0} [mm]',ytitle='z_{0} [mm]',color=None)
    h.d0z0_h.Draw("COLZ")
    regularrecophase = ROOT.TBox(-10.0,-250,10.,250.)
    regularrecophase.SetLineWidth(2)
    regularrecophase.SetLineStyle(3)
    regularrecophase.SetLineColor(ROOT.kRed+2)
    regularrecophase.SetFillStyle(0)
    regularrecophase.Draw()
    c.SaveAs("highd0tracks_d0z0."+plotsuf)

    h.removehistos()

if __name__ == '__main__':
    from optparse import OptionParser
    
    usage = "quickTrackPlotter xAODROOTFILE [OPTIONS]"
    parser = OptionParser(usage=usage)
    parser.set_defaults(suffix="pdf",notnormalize=False)
    parser.add_option( "-s",action='store',dest='suffix',\
            metavar="SUFFIX",help="Suffix for the plot files [PDF]")
    parser.add_option( "--not-normalize",action='store_true',dest='notnormalize',\
            help="Flag to make same-canvas plots using not-normalized histograms [False]")

    (opt,args) = parser.parse_args()
    if len(args) != 1:
        message = "\033[31mquickTrackPlotter ERROR\033[m Missing input"\
                " root file to process"
        raise RuntimeError(message)

    main(args,opt.suffix.lower(),normalize=(not opt.notnormalize))

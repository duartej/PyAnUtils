#!/usr/bin/env python
"""
.. script:: fitmodel -- Fitting an observable to a default selected model
==============================================================================
   :platform: Unix
      :synopsis: Quick fitting of a pdf model for an observable. First 
                 approximation which can be used to setup the workspace to 
                 start to work in.
    .. scriptauthor:: Jordi Duarte-Campderros <jorge.duarte.campderros@cern.ch>
"""

def preFit(data,obs,premodel,nVars=2):
    """ Perform a pre-fit using the simple negative binomial (just 2 parameters
    to fit per binomial, (P, K). In this way, the value of the probability is
    used it as the initial value of the probability of the conditional one:
     
    P <= p <= 1 (using the relation P=p*eff/(1-p*(1-eff)) )
    """
    from dvAnUtils.samplingprob import ObservableSamplingProb
    print 
    print "\033[1;34mfitmodel.preFit [INFO]\033[m Performing a pre-fit for the "\
            "'{0}_conditional' function".format(premodel)
    print
    
    sd = ObservableSamplingProb(obs)
    sd.setupmodel('preFit',premodel)
    sd.fitTo(data,'preFit')

    if nVars == 2: 
        # return the relevant observables
        _p = sd.get_variable_from_model('preFit','p').getVal()
        _k = sd.get_variable_from_model('preFit','k').getVal()
        del sd
        return _p,_k
    elif nVars == 4:
        _p1 = sd.get_variable_from_model('preFit','p_1').getVal()
        _k1 = sd.get_variable_from_model('preFit','k_1').getVal()
        _p2 = sd.get_variable_from_model('preFit','p_2').getVal()
        _k2 = sd.get_variable_from_model('preFit','k_2').getVal()
        del sd
        return _p1,_k1,_p2,_k2
    else:
        message = "\033[31mfitmodel.preFit ERROR\033[m Invalid number of parameters."
        message=+ " Accepted values 2 [nbd] or 4 [nbd_sum]"
        del sd
        raise RuntimeError(message)


def main(inputfile,obs,pdfdict):
    """Steering function. Performs a initial tentative fit of the data
    using a predefined pdf models. The output is stored in a ROOT file
    as a ROOT.Workspace.
    

    Parameters
    ----------
    inputfile: str
        The ROOT file name
    obs: str
        The name of the observable
    """
    from dvAnUtils.samplingprob import readfile,ObservableSamplingProb
    # Obtaining the info from the root file
    f,obsdict,modeldict,databkgdict,datasigdict = readfile(inputfile)
    if not obsdict.has_key(obs):
        raise RuntimeError("Observable '%s' not defined" % obs)
    sd = ObservableSamplingProb(obsdict[obs])
    # Does contain signal?
    has_signal_content = False
    if len(datasigdict) != 0:
        has_signal_content = True

    # Setting up the sampling probability model(s)
    sd.setupmodel('bkg',pdfdict['bkg'])
    
    # Getting the data to be used to fit
    databkg = databkgdict['dvbkg_'+obs]
    
    # In case conditional probability, perform a pre-fit to obtain a
    # good initial value for p and k
    if pdfdict['bkg'].find('conditional') != -1:
            prefitmodelname = pdfdict['bkg'].replace('_conditional','')
            _pval,_kval = preFit(databkg,obsdict[obs],prefitmodelname,2)
            sd.get_variable_from_model('bkg','p').setMin(_pval)
            sd.get_variable_from_model('bkg','k').setVal(_kval)
    
    # Perform the fit
    sd.fitTo(databkg,'bkg')
    
    samplename = inputfile.split('_')[1]
    # And plot!
    sd.plot(samplename+'_bkg_'+obs+'.pdf',databkg,'bkg')
    
    # Same for the signal content if any
    if has_signal_content:
        sd.setupmodel('sig',pdfdict['sig'])
        if pdfdict['sig'].find('conditional') != -1:
            prefitmodelname = pdfdict['sig'].replace('_conditional','')
            _pval1,_kval1,_pval2,_kval2 = preFit(databkg,obsdict[obs],prefitmodelname,4)
            sd.get_variable_from_model('bkg','p_1').setMin(_pval1)
            sd.get_variable_from_model('bkg','k_1').setVal(_kval1)
            sd.get_variable_from_model('bkg','p_2').setMin(_pval2)
            sd.get_variable_from_model('bkg','k_2').setVal(_kval2)
        datasig = datasigdict['dvsig_'+obs]
        sd.fitTo(datasig,'sig')
        sd.plot(samplename+'_sig_'+obs+'.pdf',datasig,'sig')

    extratag = '_bkg_'
    if has_signal_content:
        extratag = '_bkgsig_'

    # Create the ROOT file with the WS to continue working
    containertoupdate = [databkg]
    if has_signal_content:
        containertoupdate.append(datasig)
    nfile = inputfile.split('_')[1]+extratag+obs+'_ws.root'
    sd.update('w',nfile,containertoupdate)
    
if __name__ == '__main__':
    from optparse import OptionParser
    import os
    
    usage = "fitmodels.py ROOTFILE [options]"
    usage +="\n\nQuick fitting of a pdf [hardcoded] model  for an observable.\n"
    usage +="First approximation which can be used to setup the workspace\nto"
    usage +=" start to work with."

    parser = OptionParser(usage=usage)
    parser.set_defaults(obs='ntracks',models=None)
    parser.add_option( "-o","--observable",action='store',dest='obs',\
            help="Name of the observable [ntracks]")
    parser.add_option( "-m","--models",action='store',dest='models',\
            metavar="COMPONENT1:MODEL1[,COMPONENT2:MODEL2,...]",
            help="Name of the model(s) to be used (must exits at dVAnUtils.pdfmodels)"\
                    " [bkg:negative_binomial_pdf_conditional,"\
                    "sig:negative_binomial_sum_pdf_conditional]")

    (opt,args) = parser.parse_args()
    if len(args) != 1:
        message = "\033[31mfitmodel ERROR\033[m Mandatory argument ROOTFILE)"
        raise RuntimeError(message)
    
    # Check the root file
    if not os.path.isfile(args[0]):
        raise IOError("ROOT file '%s' not found" % args[0])
    # Parse the model option
    comp_model_dict = { 'bkg': 'negative_binomial_pdf_conditional',
            'sig':'negative_binomial_sum_pdf_conditional' }
    if opt.models:
        for compmodel in opt.models.split(","):
            try: 
                component,model = compmodel.split(":")
            except ValueError:
                message = "\033[31mfitmodel ERROR\033[m Invalid format for the option"\
                        " '-m','--models'. Please see help"
                raise RuntimeError(message)
            comp_model_dict[component]=model

    main(args[0],opt.obs,comp_model_dict)
    
